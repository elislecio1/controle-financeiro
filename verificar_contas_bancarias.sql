-- =====================================================
-- VERIFICA√á√ÉO E CORRE√á√ÉO DAS CONTAS BANC√ÅRIAS
-- =====================================================

-- 1. Verificar se a tabela contas_bancarias existe
DO $$
BEGIN
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'contas_bancarias') THEN
        RAISE NOTICE '‚úÖ Tabela contas_bancarias existe';
    ELSE
        RAISE NOTICE '‚ùå Tabela contas_bancarias n√£o existe';
    END IF;
END $$;

-- 2. Verificar estrutura da tabela
SELECT 
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name = 'contas_bancarias' 
ORDER BY ordinal_position;

-- 3. Verificar contas existentes
SELECT 
    id,
    nome,
    tipo,
    banco,
    agencia,
    conta,
    saldo,
    limite,
    ativo,
    created_at,
    updated_at
FROM contas_bancarias
ORDER BY nome;

-- 4. Contar total de contas
SELECT COUNT(*) as total_contas FROM contas_bancarias;

-- 5. Verificar contas ativas
SELECT COUNT(*) as contas_ativas FROM contas_bancarias WHERE ativo = true;

-- 6. Inserir contas padr√£o se n√£o existirem
DO $$
DECLARE
    conta_count INTEGER;
BEGIN
    -- Verificar se existem contas
    SELECT COUNT(*) INTO conta_count FROM contas_bancarias;
    
    IF conta_count = 0 THEN
        RAISE NOTICE 'üìù Nenhuma conta encontrada. Inserindo contas padr√£o...';
        
        -- Inserir contas padr√£o
        INSERT INTO contas_bancarias (nome, tipo, banco, agencia, conta, saldo, limite, ativo) VALUES
        ('CEF - CAIXA', 'conta_corrente', 'Caixa Econ√¥mica', '1234', '12345-6', 5000.00, 0.00, true),
        ('Inter DS', 'conta_corrente', 'Inter', '5678', '98765-4', 15000.00, 0.00, true),
        ('C6 DS Vendas', 'conta_corrente', 'C6 Bank', '9012', '54321-0', 3000.00, 0.00, true);
        
        RAISE NOTICE '‚úÖ Contas padr√£o inseridas com sucesso';
    ELSE
        RAISE NOTICE 'üìä Encontradas % contas no banco de dados', conta_count;
    END IF;
END $$;

-- 7. Verificar RLS (Row Level Security)
DO $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM pg_tables 
        WHERE tablename = 'contas_bancarias' 
        AND rowsecurity = true
    ) THEN
        RAISE NOTICE '‚úÖ RLS est√° habilitado na tabela contas_bancarias';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è RLS n√£o est√° habilitado na tabela contas_bancarias';
    END IF;
END $$;

-- 8. Verificar pol√≠ticas RLS
SELECT 
    policyname,
    permissive,
    roles,
    cmd,
    qual,
    with_check
FROM pg_policies 
WHERE tablename = 'contas_bancarias';

-- 9. Criar pol√≠ticas RLS se n√£o existirem
DO $$
BEGIN
    -- Pol√≠tica para usu√°rios verem suas pr√≥prias contas
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'contas_bancarias' 
        AND policyname = 'users_can_view_own_accounts'
    ) THEN
        RAISE NOTICE 'üîí Criando pol√≠tica RLS para visualiza√ß√£o de contas...';
        CREATE POLICY "users_can_view_own_accounts" ON contas_bancarias
        FOR SELECT USING (true); -- Permitir visualiza√ß√£o para todos os usu√°rios autenticados
    END IF;

    -- Pol√≠tica para usu√°rios inserirem suas pr√≥prias contas
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'contas_bancarias' 
        AND policyname = 'users_can_insert_own_accounts'
    ) THEN
        RAISE NOTICE 'üîí Criando pol√≠tica RLS para inser√ß√£o de contas...';
        CREATE POLICY "users_can_insert_own_accounts" ON contas_bancarias
        FOR INSERT WITH CHECK (true); -- Permitir inser√ß√£o para todos os usu√°rios autenticados
    END IF;

    -- Pol√≠tica para usu√°rios atualizarem suas pr√≥prias contas
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'contas_bancarias' 
        AND policyname = 'users_can_update_own_accounts'
    ) THEN
        RAISE NOTICE 'üîí Criando pol√≠tica RLS para atualiza√ß√£o de contas...';
        CREATE POLICY "users_can_update_own_accounts" ON contas_bancarias
        FOR UPDATE USING (true); -- Permitir atualiza√ß√£o para todos os usu√°rios autenticados
    END IF;

    -- Pol√≠tica para usu√°rios deletarem suas pr√≥prias contas
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'contas_bancarias' 
        AND policyname = 'users_can_delete_own_accounts'
    ) THEN
        RAISE NOTICE 'üîí Criando pol√≠tica RLS para exclus√£o de contas...';
        CREATE POLICY "users_can_delete_own_accounts" ON contas_bancarias
        FOR DELETE USING (true); -- Permitir exclus√£o para todos os usu√°rios autenticados
    END IF;
END $$;

-- 10. Habilitar RLS se n√£o estiver habilitado
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_tables 
        WHERE tablename = 'contas_bancarias' 
        AND rowsecurity = true
    ) THEN
        RAISE NOTICE 'üîí Habilitando RLS na tabela contas_bancarias...';
        ALTER TABLE contas_bancarias ENABLE ROW LEVEL SECURITY;
        RAISE NOTICE '‚úÖ RLS habilitado com sucesso';
    END IF;
END $$;

-- 11. Verifica√ß√£o final
DO $$
DECLARE
    conta_count INTEGER;
    conta_ativa_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO conta_count FROM contas_bancarias;
    SELECT COUNT(*) INTO conta_ativa_count FROM contas_bancarias WHERE ativo = true;
    
    RAISE NOTICE 'üìä RESUMO FINAL:';
    RAISE NOTICE '   Total de contas: %', conta_count;
    RAISE NOTICE '   Contas ativas: %', conta_ativa_count;
    
    IF conta_count > 0 THEN
        RAISE NOTICE '‚úÖ Sistema de contas banc√°rias funcionando corretamente';
    ELSE
        RAISE NOTICE '‚ùå Nenhuma conta encontrada no banco de dados';
    END IF;
END $$;

-- 12. Mostrar contas finais
SELECT 
    nome,
    tipo,
    banco,
    agencia,
    conta,
    saldo,
    ativo
FROM contas_bancarias
ORDER BY nome;
