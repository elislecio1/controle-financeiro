const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√µes do Supabase
const SUPABASE_URL = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY || 'your-anon-key';

// Cliente Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function limparTransacoesSimuladas() {
  try {
    console.log('üßπ Iniciando limpeza de transa√ß√µes simuladas...');
    
    // 1. Buscar todas as transa√ß√µes simuladas
    console.log('üîç Buscando transa√ß√µes simuladas...');
    
    const { data: transacoesSimuladas, error: searchError } = await supabase
      .from('transacoes_importadas')
      .select('*')
      .or('descricao.ilike.%simulad%,descricao.ilike.%Simulado%,id_externo.ilike.%inter_dev_%');
    
    if (searchError) {
      console.error('‚ùå Erro ao buscar transa√ß√µes simuladas:', searchError);
      return;
    }
    
    console.log(`üìä Encontradas ${transacoesSimuladas.length} transa√ß√µes simuladas`);
    
    if (transacoesSimuladas.length === 0) {
      console.log('‚úÖ Nenhuma transa√ß√£o simulada encontrada para remover');
      return;
    }
    
    // 2. Mostrar detalhes das transa√ß√µes que ser√£o removidas
    console.log('\nüìã Transa√ß√µes que ser√£o removidas:');
    transacoesSimuladas.forEach((transacao, index) => {
      console.log(`${index + 1}. ${transacao.descricao} - R$ ${transacao.valor} - ${transacao.data_transacao}`);
    });
    
    // 3. Remover transa√ß√µes simuladas
    console.log('\nüóëÔ∏è Removendo transa√ß√µes simuladas...');
    
    const idsParaRemover = transacoesSimuladas.map(t => t.id);
    
    const { error: deleteError } = await supabase
      .from('transacoes_importadas')
      .delete()
      .in('id', idsParaRemover);
    
    if (deleteError) {
      console.error('‚ùå Erro ao remover transa√ß√µes simuladas:', deleteError);
      return;
    }
    
    console.log(`‚úÖ ${transacoesSimuladas.length} transa√ß√µes simuladas removidas com sucesso!`);
    
    // 4. Verificar se ainda existem transa√ß√µes simuladas
    console.log('\nüîç Verificando se ainda existem transa√ß√µes simuladas...');
    
    const { data: verificacao, error: verifyError } = await supabase
      .from('transacoes_importadas')
      .select('count')
      .or('descricao.ilike.%simulad%,descricao.ilike.%Simulado%,id_externo.ilike.%inter_dev_%');
    
    if (verifyError) {
      console.error('‚ùå Erro na verifica√ß√£o:', verifyError);
    } else {
      console.log('‚úÖ Verifica√ß√£o conclu√≠da - transa√ß√µes simuladas removidas');
    }
    
    // 5. Mostrar estat√≠sticas finais
    const { data: totalTransacoes, error: totalError } = await supabase
      .from('transacoes_importadas')
      .select('*', { count: 'exact' });
    
    if (!totalError) {
      console.log(`üìä Total de transa√ß√µes restantes: ${totalTransacoes.length}`);
    }
    
    console.log('\nüéØ Limpeza conclu√≠da com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar o script
limparTransacoesSimuladas();
