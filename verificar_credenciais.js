// Script para verificar se as credenciais est√£o sendo salvas corretamente
import { createClient } from '@supabase/supabase-js';

// Configura√ß√µes do Supabase (use as mesmas do seu .env)
const SUPABASE_URL = 'https://your-project.supabase.co'; // Substitua pela sua URL
const SUPABASE_ANON_KEY = 'your-anon-key'; // Substitua pela sua chave

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function verificarCredenciais() {
  try {
    console.log('üîç Verificando credenciais salvas no banco...');
    
    // Buscar todas as integra√ß√µes
    const { data: integracoes, error } = await supabase
      .from('integracoes_bancarias')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('‚ùå Erro ao buscar integra√ß√µes:', error);
      return;
    }
    
    console.log(`üìä Encontradas ${integracoes.length} integra√ß√µes:`);
    
    integracoes.forEach((integracao, index) => {
      console.log(`\n--- Integra√ß√£o ${index + 1} ---`);
      console.log(`ID: ${integracao.id}`);
      console.log(`Nome: ${integracao.nome}`);
      console.log(`Banco: ${integracao.banco}`);
      console.log(`Tipo: ${integracao.tipo_integracao}`);
      console.log(`Status: ${integracao.status}`);
      console.log(`Ativo: ${integracao.ativo}`);
      
      // Verificar configura√ß√£o
      if (integracao.configuracao) {
        const config = integracao.configuracao;
        console.log('\nüîß Configura√ß√£o:');
        console.log(`  Ambiente: ${config.ambiente || 'N/A'}`);
        console.log(`  API Key: ${config.apiKey ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
        console.log(`  API Secret: ${config.apiSecret ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
        console.log(`  Client ID: ${config.clientId ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
        console.log(`  Client Secret: ${config.clientSecret ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
        console.log(`  Base URL: ${config.baseUrl || 'N/A'}`);
        console.log(`  Timeout: ${config.timeout || 'N/A'}`);
        console.log(`  Tipo Certificado: ${config.tipoCertificado || 'N/A'}`);
        console.log(`  Senha Certificado: ${config.senhaCertificado ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
        console.log(`  Certificado Arquivo: ${config.certificadoArquivo ? '‚úÖ Selecionado' : '‚ùå N√£o selecionado'}`);
        console.log(`  Chave Privada Arquivo: ${config.chavePrivadaArquivo ? '‚úÖ Selecionada' : '‚ùå N√£o selecionada'}`);
      } else {
        console.log('‚ùå Nenhuma configura√ß√£o encontrada');
      }
      
      console.log(`\nüìÖ Criada em: ${integracao.created_at}`);
      console.log(`üìÖ Atualizada em: ${integracao.updated_at}`);
    });
    
    // Verificar se h√° integra√ß√µes do Banco Inter
    const integracoesInter = integracoes.filter(i => i.banco === '077');
    console.log(`\nüè¶ Integra√ß√µes do Banco Inter: ${integracoesInter.length}`);
    
    if (integracoesInter.length > 0) {
      console.log('\n‚ö†Ô∏è  Verifica√ß√µes importantes para Banco Inter:');
      integracoesInter.forEach((integracao, index) => {
        const config = integracao.configuracao;
        console.log(`\n  Integra√ß√£o Inter ${index + 1} (${integracao.nome}):`);
        
        if (!config.apiKey || !config.apiSecret) {
          console.log('    ‚ùå API Key e/ou API Secret n√£o configuradas');
        } else {
          console.log('    ‚úÖ API Key e API Secret configuradas');
        }
        
        if (!config.certificadoArquivo) {
          console.log('    ‚ùå Certificado digital n√£o selecionado');
        } else {
          console.log('    ‚úÖ Certificado digital selecionado');
        }
        
        if (integracao.tipo_integracao === 'api_oficial') {
          console.log('    ‚úÖ Tipo de integra√ß√£o correto (API Oficial)');
        } else {
          console.log('    ‚ö†Ô∏è  Tipo de integra√ß√£o pode n√£o ser o ideal');
        }
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar credenciais:', error);
  }
}

// Executar verifica√ß√£o
verificarCredenciais();
